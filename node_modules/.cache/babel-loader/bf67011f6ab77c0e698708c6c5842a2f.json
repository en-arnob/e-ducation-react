{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _cssSyntaxError = _interopRequireDefault(require(\"./css-syntax-error\"));\n\nvar _stringifier = _interopRequireDefault(require(\"./stringifier\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction cloneNode(obj, parent) {\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    var value = obj[i];\n    var type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    } else if (i === 'source') {\n      cloned[i] = value;\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n}\n/**\n * All node classes inherit the following common methods.\n *\n * @abstract\n */\n\n\nvar Node = /*#__PURE__*/function () {\n  /**\n   * @param {object} [defaults] Value for node properties.\n   */\n  function Node(defaults) {\n    if (defaults === void 0) {\n      defaults = {};\n    }\n\n    this.raws = {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof defaults !== 'object' && typeof defaults !== 'undefined') {\n        throw new Error('PostCSS nodes constructor accepts object, not ' + JSON.stringify(defaults));\n      }\n    }\n\n    for (var name in defaults) {\n      this[name] = defaults[name];\n    }\n  }\n  /**\n   * Returns a `CssSyntaxError` instance containing the original position\n   * of the node in the source, showing line and column numbers and also\n   * a small excerpt to facilitate debugging.\n   *\n   * If present, an input source map will be used to get the original position\n   * of the source, even from a previous compilation step\n   * (e.g., from Sass compilation).\n   *\n   * This method produces very useful error messages.\n   *\n   * @param {string} message     Error description.\n   * @param {object} [opts]      Options.\n   * @param {string} opts.plugin Plugin name that created this error.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   *\n   * @return {CssSyntaxError} Error object to throw it.\n   *\n   * @example\n   * if (!variables[name]) {\n   *   throw decl.error('Unknown variable ' + name, { word: name })\n   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black\n   *   //   color: $black\n   *   // a\n   *   //          ^\n   *   //   background: white\n   * }\n   */\n\n\n  var _proto = Node.prototype;\n\n  _proto.error = function error(message, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (this.source) {\n      var pos = this.positionBy(opts);\n      return this.source.input.error(message, pos.line, pos.column, opts);\n    }\n\n    return new _cssSyntaxError.default(message);\n  }\n  /**\n   * This method is provided as a convenience wrapper for {@link Result#warn}.\n   *\n   * @param {Result} result      The {@link Result} instance\n   *                             that will receive the warning.\n   * @param {string} text        Warning message.\n   * @param {object} [opts]      Options\n   * @param {string} opts.plugin Plugin name that created this warning.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   *\n   * @return {Warning} Created warning object.\n   *\n   * @example\n   * const plugin = postcss.plugin('postcss-deprecated', () => {\n   *   return (root, result) => {\n   *     root.walkDecls('bad', decl => {\n   *       decl.warn(result, 'Deprecated property bad')\n   *     })\n   *   }\n   * })\n   */\n  ;\n\n  _proto.warn = function warn(result, text, opts) {\n    var data = {\n      node: this\n    };\n\n    for (var i in opts) {\n      data[i] = opts[i];\n    }\n\n    return result.warn(text, data);\n  }\n  /**\n   * Removes the node from its parent and cleans the parent properties\n   * from the node and its children.\n   *\n   * @example\n   * if (decl.prop.match(/^-webkit-/)) {\n   *   decl.remove()\n   * }\n   *\n   * @return {Node} Node to make calls chain.\n   */\n  ;\n\n  _proto.remove = function remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  }\n  /**\n   * Returns a CSS string representing the node.\n   *\n   * @param {stringifier|syntax} [stringifier] A syntax to use\n   *                                           in string generation.\n   *\n   * @return {string} CSS string of this node.\n   *\n   * @example\n   * postcss.rule({ selector: 'a' }).toString() //=> \"a {}\"\n   */\n  ;\n\n  _proto.toString = function toString(stringifier) {\n    if (stringifier === void 0) {\n      stringifier = _stringify.default;\n    }\n\n    if (stringifier.stringify) stringifier = stringifier.stringify;\n    var result = '';\n    stringifier(this, function (i) {\n      result += i;\n    });\n    return result;\n  }\n  /**\n   * Returns an exact clone of the node.\n   *\n   * The resulting cloned node and its (cloned) children will retain\n   * code style properties.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @example\n   * decl.raws.before    //=> \"\\n  \"\n   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })\n   * cloned.raws.before  //=> \"\\n  \"\n   * cloned.toString()   //=> -moz-transform: scale(0)\n   *\n   * @return {Node} Clone of the node.\n   */\n  ;\n\n  _proto.clone = function clone(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = cloneNode(this);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * before the current node.\n   *\n   * @param {object} [overrides] Mew properties to override in the clone.\n   *\n   * @example\n   * decl.cloneBefore({ prop: '-moz-' + decl.prop })\n   *\n   * @return {Node} New node\n   */\n  ;\n\n  _proto.cloneBefore = function cloneBefore(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = this.clone(overrides);\n    this.parent.insertBefore(this, cloned);\n    return cloned;\n  }\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * after the current node.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @return {Node} New node.\n   */\n  ;\n\n  _proto.cloneAfter = function cloneAfter(overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var cloned = this.clone(overrides);\n    this.parent.insertAfter(this, cloned);\n    return cloned;\n  }\n  /**\n   * Inserts node(s) before the current node and removes the current node.\n   *\n   * @param {...Node} nodes Mode(s) to replace current one.\n   *\n   * @example\n   * if (atrule.name === 'mixin') {\n   *   atrule.replaceWith(mixinRules[atrule.params])\n   * }\n   *\n   * @return {Node} Current node to methods chain.\n   */\n  ;\n\n  _proto.replaceWith = function replaceWith() {\n    if (this.parent) {\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _nodes = nodes; _i < _nodes.length; _i++) {\n        var node = _nodes[_i];\n        this.parent.insertBefore(this, node);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  }\n  /**\n   * Returns the next child of the node’s parent.\n   * Returns `undefined` if the current node is the last child.\n   *\n   * @return {Node|undefined} Next node.\n   *\n   * @example\n   * if (comment.text === 'delete next') {\n   *   const next = comment.next()\n   *   if (next) {\n   *     next.remove()\n   *   }\n   * }\n   */\n  ;\n\n  _proto.next = function next() {\n    if (!this.parent) return undefined;\n    var index = this.parent.index(this);\n    return this.parent.nodes[index + 1];\n  }\n  /**\n   * Returns the previous child of the node’s parent.\n   * Returns `undefined` if the current node is the first child.\n   *\n   * @return {Node|undefined} Previous node.\n   *\n   * @example\n   * const annotation = decl.prev()\n   * if (annotation.type === 'comment') {\n   *   readAnnotation(annotation.text)\n   * }\n   */\n  ;\n\n  _proto.prev = function prev() {\n    if (!this.parent) return undefined;\n    var index = this.parent.index(this);\n    return this.parent.nodes[index - 1];\n  }\n  /**\n   * Insert new node before current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertBefore(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.before('content: \"\"')\n   */\n  ;\n\n  _proto.before = function before(add) {\n    this.parent.insertBefore(this, add);\n    return this;\n  }\n  /**\n   * Insert new node after current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertAfter(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.after('color: black')\n   */\n  ;\n\n  _proto.after = function after(add) {\n    this.parent.insertAfter(this, add);\n    return this;\n  };\n\n  _proto.toJSON = function toJSON() {\n    var fixed = {};\n\n    for (var name in this) {\n      if (!this.hasOwnProperty(name)) continue;\n      if (name === 'parent') continue;\n      var value = this[name];\n\n      if (value instanceof Array) {\n        fixed[name] = value.map(function (i) {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON();\n          } else {\n            return i;\n          }\n        });\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON();\n      } else {\n        fixed[name] = value;\n      }\n    }\n\n    return fixed;\n  }\n  /**\n   * Returns a {@link Node#raws} value. If the node is missing\n   * the code style property (because the node was manually built or cloned),\n   * PostCSS will try to autodetect the code style property by looking\n   * at other nodes in the tree.\n   *\n   * @param {string} prop          Name of code style property.\n   * @param {string} [defaultType] Name of default value, it can be missed\n   *                               if the value is the same as prop.\n   *\n   * @example\n   * const root = postcss.parse('a { background: white }')\n   * root.nodes[0].append({ prop: 'color', value: 'black' })\n   * root.nodes[0].nodes[1].raws.before   //=> undefined\n   * root.nodes[0].nodes[1].raw('before') //=> ' '\n   *\n   * @return {string} Code style value.\n   */\n  ;\n\n  _proto.raw = function raw(prop, defaultType) {\n    var str = new _stringifier.default();\n    return str.raw(this, prop, defaultType);\n  }\n  /**\n   * Finds the Root instance of the node’s tree.\n   *\n   * @example\n   * root.nodes[0].nodes[0].root() === root\n   *\n   * @return {Root} Root parent.\n   */\n  ;\n\n  _proto.root = function root() {\n    var result = this;\n\n    while (result.parent) {\n      result = result.parent;\n    }\n\n    return result;\n  }\n  /**\n   * Clear the code style properties for the node and its children.\n   *\n   * @param {boolean} [keepBetween] Keep the raws.between symbols.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * node.raws.before  //=> ' '\n   * node.cleanRaws()\n   * node.raws.before  //=> undefined\n   */\n  ;\n\n  _proto.cleanRaws = function cleanRaws(keepBetween) {\n    delete this.raws.before;\n    delete this.raws.after;\n    if (!keepBetween) delete this.raws.between;\n  };\n\n  _proto.positionInside = function positionInside(index) {\n    var string = this.toString();\n    var column = this.source.start.column;\n    var line = this.source.start.line;\n\n    for (var i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1;\n        line += 1;\n      } else {\n        column += 1;\n      }\n    }\n\n    return {\n      line: line,\n      column: column\n    };\n  };\n\n  _proto.positionBy = function positionBy(opts) {\n    var pos = this.source.start;\n\n    if (opts.index) {\n      pos = this.positionInside(opts.index);\n    } else if (opts.word) {\n      var index = this.toString().indexOf(opts.word);\n      if (index !== -1) pos = this.positionInside(index);\n    }\n\n    return pos;\n  }\n  /**\n   * @memberof Node#\n   * @member {string} type String representing the node’s type.\n   *                       Possible values are `root`, `atrule`, `rule`,\n   *                       `decl`, or `comment`.\n   *\n   * @example\n   * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'\n   */\n\n  /**\n   * @memberof Node#\n   * @member {Container} parent The node’s parent node.\n   *\n   * @example\n   * root.nodes[0].parent === root\n   */\n\n  /**\n   * @memberof Node#\n   * @member {source} source The input source of the node.\n   *\n   * The property is used in source map generation.\n   *\n   * If you create a node manually (e.g., with `postcss.decl()`),\n   * that node will not have a `source` property and will be absent\n   * from the source map. For this reason, the plugin developer should\n   * consider cloning nodes to create new ones (in which case the new node’s\n   * source will reference the original, cloned node) or setting\n   * the `source` property manually.\n   *\n   * ```js\n   * // Bad\n   * const prefixed = postcss.decl({\n   *   prop: '-moz-' + decl.prop,\n   *   value: decl.value\n   * })\n   *\n   * // Good\n   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * ```js\n   * if (atrule.name === 'add-link') {\n   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })\n   *   atrule.parent.insertBefore(atrule, rule)\n   * }\n   * ```\n   *\n   * @example\n   * decl.source.input.from //=> '/home/ai/a.sass'\n   * decl.source.start      //=> { line: 10, column: 2 }\n   * decl.source.end        //=> { line: 10, column: 12 }\n   */\n\n  /**\n   * @memberof Node#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text\n   *   and <code>*&#47;</code>.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans selectors, declaration values and at-rule parameters\n   * from comments and extra spaces, but it stores origin content in raws\n   * properties. As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n  ;\n\n  return Node;\n}();\n\nvar _default = Node;\n/**\n * @typedef {object} position\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n\n/**\n * @typedef {object} source\n * @property {Input} input    {@link Input} with input file\n * @property {position} start The starting position of the node’s source.\n * @property {position} end   The ending position of the node’s source.\n */\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["node.es6"],"names":["cloned","obj","value","type","i","cloneNode","Node","defaults","process","JSON","error","opts","pos","CssSyntaxError","warn","data","node","result","remove","toString","stringifier","stringify","clone","overrides","cloneBefore","cloneAfter","replaceWith","nodes","next","index","prev","before","after","toJSON","fixed","name","raw","str","Stringifier","root","cleanRaws","positionInside","string","column","line","positionBy"],"mappings":"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","sourcesContent":["import CssSyntaxError from './css-syntax-error'\nimport Stringifier from './stringifier'\nimport stringify from './stringify'\n\nfunction cloneNode (obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\n/**\n * All node classes inherit the following common methods.\n *\n * @abstract\n */\nclass Node {\n  /**\n   * @param {object} [defaults] Value for node properties.\n   */\n  constructor (defaults = { }) {\n    this.raws = { }\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof defaults !== 'object' && typeof defaults !== 'undefined') {\n        throw new Error(\n          'PostCSS nodes constructor accepts object, not ' +\n          JSON.stringify(defaults)\n        )\n      }\n    }\n    for (let name in defaults) {\n      this[name] = defaults[name]\n    }\n  }\n\n  /**\n   * Returns a `CssSyntaxError` instance containing the original position\n   * of the node in the source, showing line and column numbers and also\n   * a small excerpt to facilitate debugging.\n   *\n   * If present, an input source map will be used to get the original position\n   * of the source, even from a previous compilation step\n   * (e.g., from Sass compilation).\n   *\n   * This method produces very useful error messages.\n   *\n   * @param {string} message     Error description.\n   * @param {object} [opts]      Options.\n   * @param {string} opts.plugin Plugin name that created this error.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   *\n   * @return {CssSyntaxError} Error object to throw it.\n   *\n   * @example\n   * if (!variables[name]) {\n   *   throw decl.error('Unknown variable ' + name, { word: name })\n   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black\n   *   //   color: $black\n   *   // a\n   *   //          ^\n   *   //   background: white\n   * }\n   */\n  error (message, opts = { }) {\n    if (this.source) {\n      let pos = this.positionBy(opts)\n      return this.source.input.error(message, pos.line, pos.column, opts)\n    }\n    return new CssSyntaxError(message)\n  }\n\n  /**\n   * This method is provided as a convenience wrapper for {@link Result#warn}.\n   *\n   * @param {Result} result      The {@link Result} instance\n   *                             that will receive the warning.\n   * @param {string} text        Warning message.\n   * @param {object} [opts]      Options\n   * @param {string} opts.plugin Plugin name that created this warning.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   *\n   * @return {Warning} Created warning object.\n   *\n   * @example\n   * const plugin = postcss.plugin('postcss-deprecated', () => {\n   *   return (root, result) => {\n   *     root.walkDecls('bad', decl => {\n   *       decl.warn(result, 'Deprecated property bad')\n   *     })\n   *   }\n   * })\n   */\n  warn (result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  /**\n   * Removes the node from its parent and cleans the parent properties\n   * from the node and its children.\n   *\n   * @example\n   * if (decl.prop.match(/^-webkit-/)) {\n   *   decl.remove()\n   * }\n   *\n   * @return {Node} Node to make calls chain.\n   */\n  remove () {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  /**\n   * Returns a CSS string representing the node.\n   *\n   * @param {stringifier|syntax} [stringifier] A syntax to use\n   *                                           in string generation.\n   *\n   * @return {string} CSS string of this node.\n   *\n   * @example\n   * postcss.rule({ selector: 'a' }).toString() //=> \"a {}\"\n   */\n  toString (stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  /**\n   * Returns an exact clone of the node.\n   *\n   * The resulting cloned node and its (cloned) children will retain\n   * code style properties.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @example\n   * decl.raws.before    //=> \"\\n  \"\n   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })\n   * cloned.raws.before  //=> \"\\n  \"\n   * cloned.toString()   //=> -moz-transform: scale(0)\n   *\n   * @return {Node} Clone of the node.\n   */\n  clone (overrides = { }) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * before the current node.\n   *\n   * @param {object} [overrides] Mew properties to override in the clone.\n   *\n   * @example\n   * decl.cloneBefore({ prop: '-moz-' + decl.prop })\n   *\n   * @return {Node} New node\n   */\n  cloneBefore (overrides = { }) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * after the current node.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @return {Node} New node.\n   */\n  cloneAfter (overrides = { }) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  /**\n   * Inserts node(s) before the current node and removes the current node.\n   *\n   * @param {...Node} nodes Mode(s) to replace current one.\n   *\n   * @example\n   * if (atrule.name === 'mixin') {\n   *   atrule.replaceWith(mixinRules[atrule.params])\n   * }\n   *\n   * @return {Node} Current node to methods chain.\n   */\n  replaceWith (...nodes) {\n    if (this.parent) {\n      for (let node of nodes) {\n        this.parent.insertBefore(this, node)\n      }\n\n      this.remove()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns the next child of the node’s parent.\n   * Returns `undefined` if the current node is the last child.\n   *\n   * @return {Node|undefined} Next node.\n   *\n   * @example\n   * if (comment.text === 'delete next') {\n   *   const next = comment.next()\n   *   if (next) {\n   *     next.remove()\n   *   }\n   * }\n   */\n  next () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  /**\n   * Returns the previous child of the node’s parent.\n   * Returns `undefined` if the current node is the first child.\n   *\n   * @return {Node|undefined} Previous node.\n   *\n   * @example\n   * const annotation = decl.prev()\n   * if (annotation.type === 'comment') {\n   *   readAnnotation(annotation.text)\n   * }\n   */\n  prev () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  /**\n   * Insert new node before current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertBefore(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.before('content: \"\"')\n   */\n  before (add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  /**\n   * Insert new node after current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertAfter(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.after('color: black')\n   */\n  after (add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  toJSON () {\n    let fixed = { }\n\n    for (let name in this) {\n      if (!this.hasOwnProperty(name)) continue\n      if (name === 'parent') continue\n      let value = this[name]\n\n      if (value instanceof Array) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON()\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON()\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    return fixed\n  }\n\n  /**\n   * Returns a {@link Node#raws} value. If the node is missing\n   * the code style property (because the node was manually built or cloned),\n   * PostCSS will try to autodetect the code style property by looking\n   * at other nodes in the tree.\n   *\n   * @param {string} prop          Name of code style property.\n   * @param {string} [defaultType] Name of default value, it can be missed\n   *                               if the value is the same as prop.\n   *\n   * @example\n   * const root = postcss.parse('a { background: white }')\n   * root.nodes[0].append({ prop: 'color', value: 'black' })\n   * root.nodes[0].nodes[1].raws.before   //=> undefined\n   * root.nodes[0].nodes[1].raw('before') //=> ' '\n   *\n   * @return {string} Code style value.\n   */\n  raw (prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  /**\n   * Finds the Root instance of the node’s tree.\n   *\n   * @example\n   * root.nodes[0].nodes[0].root() === root\n   *\n   * @return {Root} Root parent.\n   */\n  root () {\n    let result = this\n    while (result.parent) result = result.parent\n    return result\n  }\n\n  /**\n   * Clear the code style properties for the node and its children.\n   *\n   * @param {boolean} [keepBetween] Keep the raws.between symbols.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * node.raws.before  //=> ' '\n   * node.cleanRaws()\n   * node.raws.before  //=> undefined\n   */\n  cleanRaws (keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  positionInside (index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy (opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  /**\n   * @memberof Node#\n   * @member {string} type String representing the node’s type.\n   *                       Possible values are `root`, `atrule`, `rule`,\n   *                       `decl`, or `comment`.\n   *\n   * @example\n   * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'\n   */\n\n  /**\n   * @memberof Node#\n   * @member {Container} parent The node’s parent node.\n   *\n   * @example\n   * root.nodes[0].parent === root\n   */\n\n  /**\n   * @memberof Node#\n   * @member {source} source The input source of the node.\n   *\n   * The property is used in source map generation.\n   *\n   * If you create a node manually (e.g., with `postcss.decl()`),\n   * that node will not have a `source` property and will be absent\n   * from the source map. For this reason, the plugin developer should\n   * consider cloning nodes to create new ones (in which case the new node’s\n   * source will reference the original, cloned node) or setting\n   * the `source` property manually.\n   *\n   * ```js\n   * // Bad\n   * const prefixed = postcss.decl({\n   *   prop: '-moz-' + decl.prop,\n   *   value: decl.value\n   * })\n   *\n   * // Good\n   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * ```js\n   * if (atrule.name === 'add-link') {\n   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })\n   *   atrule.parent.insertBefore(atrule, rule)\n   * }\n   * ```\n   *\n   * @example\n   * decl.source.input.from //=> '/home/ai/a.sass'\n   * decl.source.start      //=> { line: 10, column: 2 }\n   * decl.source.end        //=> { line: 10, column: 12 }\n   */\n\n  /**\n   * @memberof Node#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text\n   *   and <code>*&#47;</code>.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans selectors, declaration values and at-rule parameters\n   * from comments and extra spaces, but it stores origin content in raws\n   * properties. As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n}\n\nexport default Node\n\n/**\n * @typedef {object} position\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n\n/**\n * @typedef {object} source\n * @property {Input} input    {@link Input} with input file\n * @property {position} start The starting position of the node’s source.\n * @property {position} end   The ending position of the node’s source.\n */\n"]},"metadata":{},"sourceType":"script"}