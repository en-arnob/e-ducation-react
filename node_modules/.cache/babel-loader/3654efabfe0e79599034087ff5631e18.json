{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _declaration = _interopRequireDefault(require(\"./declaration\"));\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify\"));\n\nvar _comment = _interopRequireDefault(require(\"./comment\"));\n\nvar _atRule = _interopRequireDefault(require(\"./at-rule\"));\n\nvar _vendor = _interopRequireDefault(require(\"./vendor\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nvar _list = _interopRequireDefault(require(\"./list\"));\n\nvar _rule = _interopRequireDefault(require(\"./rule\"));\n\nvar _root = _interopRequireDefault(require(\"./root\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a new {@link Processor} instance that will apply `plugins`\n * as CSS processors.\n *\n * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.\n *        See {@link Processor#use} for plugin format.\n *\n * @return {Processor} Processor to process multiple CSS.\n *\n * @example\n * import postcss from 'postcss'\n *\n * postcss(plugins).process(css, { from, to }).then(result => {\n *   console.log(result.css)\n * })\n *\n * @namespace postcss\n */\n\n\nfunction postcss() {\n  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0];\n  }\n\n  return new _processor.default(plugins);\n}\n/**\n * Creates a PostCSS plugin with a standard API.\n *\n * The newly-wrapped function will provide both the name and PostCSS\n * version of the plugin.\n *\n * ```js\n * const processor = postcss([replace])\n * processor.plugins[0].postcssPlugin  //=> 'postcss-replace'\n * processor.plugins[0].postcssVersion //=> '6.0.0'\n * ```\n *\n * The plugin function receives 2 arguments: {@link Root}\n * and {@link Result} instance. The function should mutate the provided\n * `Root` node. Alternatively, you can create a new `Root` node\n * and override the `result.root` property.\n *\n * ```js\n * const cleaner = postcss.plugin('postcss-cleaner', () => {\n *   return (root, result) => {\n *     result.root = postcss.root()\n *   }\n * })\n * ```\n *\n * As a convenience, plugins also expose a `process` method so that you can use\n * them as standalone tools.\n *\n * ```js\n * cleaner.process(css, processOpts, pluginOpts)\n * // This is equivalent to:\n * postcss([ cleaner(pluginOpts) ]).process(css, processOpts)\n * ```\n *\n * Asynchronous plugins should return a `Promise` instance.\n *\n * ```js\n * postcss.plugin('postcss-import', () => {\n *   return (root, result) => {\n *     return new Promise( (resolve, reject) => {\n *       fs.readFile('base.css', (base) => {\n *         root.prepend(base)\n *         resolve()\n *       })\n *     })\n *   }\n * })\n * ```\n *\n * Add warnings using the {@link Node#warn} method.\n * Send data to other plugins using the {@link Result#messages} array.\n *\n * ```js\n * postcss.plugin('postcss-caniuse-test', () => {\n *   return (root, result) => {\n *     root.walkDecls(decl => {\n *       if (!caniuse.support(decl.prop)) {\n *         decl.warn(result, 'Some browsers do not support ' + decl.prop)\n *       }\n *     })\n *   }\n * })\n * ```\n *\n * @param {string} name          PostCSS plugin name. Same as in `name`\n *                               property in `package.json`. It will be saved\n *                               in `plugin.postcssPlugin` property.\n * @param {function} initializer Will receive plugin options\n *                               and should return {@link pluginFunction}\n *\n * @return {Plugin} PostCSS plugin.\n */\n\n\npostcss.plugin = function plugin(name, initializer) {\n  function creator() {\n    var transformer = initializer.apply(void 0, arguments);\n    transformer.postcssPlugin = name;\n    transformer.postcssVersion = new _processor.default().version;\n    return transformer;\n  }\n\n  var cache;\n  Object.defineProperty(creator, 'postcss', {\n    get: function get() {\n      if (!cache) cache = creator();\n      return cache;\n    }\n  });\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts);\n  };\n\n  return creator;\n};\n/**\n * Default function to convert a node tree into a CSS string.\n *\n * @param {Node} node       Start node for stringifing. Usually {@link Root}.\n * @param {builder} builder Function to concatenate CSS from nodeâ€™s parts\n *                          or generate string and source map.\n *\n * @return {void}\n *\n * @function\n */\n\n\npostcss.stringify = _stringify.default;\n/**\n * Parses source css and returns a new {@link Root} node,\n * which contains the source CSS nodes.\n *\n * @param {string|toString} css   String with input CSS or any object\n *                                with toString() method, like a Buffer\n * @param {processOptions} [opts] Options with only `from` and `map` keys.\n *\n * @return {Root} PostCSS AST.\n *\n * @example\n * // Simple CSS concatenation with source map support\n * const root1 = postcss.parse(css1, { from: file1 })\n * const root2 = postcss.parse(css2, { from: file2 })\n * root1.append(root2).toResult().css\n *\n * @function\n */\n\npostcss.parse = _parse.default;\n/**\n * Contains the {@link vendor} module.\n *\n * @type {vendor}\n *\n * @example\n * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']\n */\n\npostcss.vendor = _vendor.default;\n/**\n * Contains the {@link list} module.\n *\n * @member {list}\n *\n * @example\n * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']\n */\n\npostcss.list = _list.default;\n/**\n * Creates a new {@link Comment} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Comment} New comment node\n *\n * @example\n * postcss.comment({ text: 'test' })\n */\n\npostcss.comment = function (defaults) {\n  return new _comment.default(defaults);\n};\n/**\n * Creates a new {@link AtRule} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {AtRule} new at-rule node\n *\n * @example\n * postcss.atRule({ name: 'charset' }).toString() //=> \"@charset\"\n */\n\n\npostcss.atRule = function (defaults) {\n  return new _atRule.default(defaults);\n};\n/**\n * Creates a new {@link Declaration} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Declaration} new declaration node\n *\n * @example\n * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> \"color: red\"\n */\n\n\npostcss.decl = function (defaults) {\n  return new _declaration.default(defaults);\n};\n/**\n * Creates a new {@link Rule} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Rule} new rule node\n *\n * @example\n * postcss.rule({ selector: 'a' }).toString() //=> \"a {\\n}\"\n */\n\n\npostcss.rule = function (defaults) {\n  return new _rule.default(defaults);\n};\n/**\n * Creates a new {@link Root} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Root} new root node.\n *\n * @example\n * postcss.root({ after: '\\n' }).toString() //=> \"\\n\"\n */\n\n\npostcss.root = function (defaults) {\n  return new _root.default(defaults);\n};\n\nvar _default = postcss;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["postcss.es6"],"names":["plugins","Array","Processor","postcss","transformer","initializer","Object","get","cache","creator","stringify","parse","vendor","list","Comment","AtRule","Declaration","Rule","Root"],"mappings":"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","sourcesContent":["import Declaration from './declaration'\nimport Processor from './processor'\nimport stringify from './stringify'\nimport Comment from './comment'\nimport AtRule from './at-rule'\nimport vendor from './vendor'\nimport parse from './parse'\nimport list from './list'\nimport Rule from './rule'\nimport Root from './root'\n\n/**\n * Create a new {@link Processor} instance that will apply `plugins`\n * as CSS processors.\n *\n * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.\n *        See {@link Processor#use} for plugin format.\n *\n * @return {Processor} Processor to process multiple CSS.\n *\n * @example\n * import postcss from 'postcss'\n *\n * postcss(plugins).process(css, { from, to }).then(result => {\n *   console.log(result.css)\n * })\n *\n * @namespace postcss\n */\nfunction postcss (...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\n/**\n * Creates a PostCSS plugin with a standard API.\n *\n * The newly-wrapped function will provide both the name and PostCSS\n * version of the plugin.\n *\n * ```js\n * const processor = postcss([replace])\n * processor.plugins[0].postcssPlugin  //=> 'postcss-replace'\n * processor.plugins[0].postcssVersion //=> '6.0.0'\n * ```\n *\n * The plugin function receives 2 arguments: {@link Root}\n * and {@link Result} instance. The function should mutate the provided\n * `Root` node. Alternatively, you can create a new `Root` node\n * and override the `result.root` property.\n *\n * ```js\n * const cleaner = postcss.plugin('postcss-cleaner', () => {\n *   return (root, result) => {\n *     result.root = postcss.root()\n *   }\n * })\n * ```\n *\n * As a convenience, plugins also expose a `process` method so that you can use\n * them as standalone tools.\n *\n * ```js\n * cleaner.process(css, processOpts, pluginOpts)\n * // This is equivalent to:\n * postcss([ cleaner(pluginOpts) ]).process(css, processOpts)\n * ```\n *\n * Asynchronous plugins should return a `Promise` instance.\n *\n * ```js\n * postcss.plugin('postcss-import', () => {\n *   return (root, result) => {\n *     return new Promise( (resolve, reject) => {\n *       fs.readFile('base.css', (base) => {\n *         root.prepend(base)\n *         resolve()\n *       })\n *     })\n *   }\n * })\n * ```\n *\n * Add warnings using the {@link Node#warn} method.\n * Send data to other plugins using the {@link Result#messages} array.\n *\n * ```js\n * postcss.plugin('postcss-caniuse-test', () => {\n *   return (root, result) => {\n *     root.walkDecls(decl => {\n *       if (!caniuse.support(decl.prop)) {\n *         decl.warn(result, 'Some browsers do not support ' + decl.prop)\n *       }\n *     })\n *   }\n * })\n * ```\n *\n * @param {string} name          PostCSS plugin name. Same as in `name`\n *                               property in `package.json`. It will be saved\n *                               in `plugin.postcssPlugin` property.\n * @param {function} initializer Will receive plugin options\n *                               and should return {@link pluginFunction}\n *\n * @return {Plugin} PostCSS plugin.\n */\npostcss.plugin = function plugin (name, initializer) {\n  function creator (...args) {\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = (new Processor()).version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get () {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\n/**\n * Default function to convert a node tree into a CSS string.\n *\n * @param {Node} node       Start node for stringifing. Usually {@link Root}.\n * @param {builder} builder Function to concatenate CSS from nodeâ€™s parts\n *                          or generate string and source map.\n *\n * @return {void}\n *\n * @function\n */\npostcss.stringify = stringify\n\n/**\n * Parses source css and returns a new {@link Root} node,\n * which contains the source CSS nodes.\n *\n * @param {string|toString} css   String with input CSS or any object\n *                                with toString() method, like a Buffer\n * @param {processOptions} [opts] Options with only `from` and `map` keys.\n *\n * @return {Root} PostCSS AST.\n *\n * @example\n * // Simple CSS concatenation with source map support\n * const root1 = postcss.parse(css1, { from: file1 })\n * const root2 = postcss.parse(css2, { from: file2 })\n * root1.append(root2).toResult().css\n *\n * @function\n */\npostcss.parse = parse\n\n/**\n * Contains the {@link vendor} module.\n *\n * @type {vendor}\n *\n * @example\n * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']\n */\npostcss.vendor = vendor\n\n/**\n * Contains the {@link list} module.\n *\n * @member {list}\n *\n * @example\n * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']\n */\npostcss.list = list\n\n/**\n * Creates a new {@link Comment} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Comment} New comment node\n *\n * @example\n * postcss.comment({ text: 'test' })\n */\npostcss.comment = defaults => new Comment(defaults)\n\n/**\n * Creates a new {@link AtRule} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {AtRule} new at-rule node\n *\n * @example\n * postcss.atRule({ name: 'charset' }).toString() //=> \"@charset\"\n */\npostcss.atRule = defaults => new AtRule(defaults)\n\n/**\n * Creates a new {@link Declaration} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Declaration} new declaration node\n *\n * @example\n * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> \"color: red\"\n */\npostcss.decl = defaults => new Declaration(defaults)\n\n/**\n * Creates a new {@link Rule} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Rule} new rule node\n *\n * @example\n * postcss.rule({ selector: 'a' }).toString() //=> \"a {\\n}\"\n */\npostcss.rule = defaults => new Rule(defaults)\n\n/**\n * Creates a new {@link Root} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Root} new root node.\n *\n * @example\n * postcss.root({ after: '\\n' }).toString() //=> \"\\n\"\n */\npostcss.root = defaults => new Root(defaults)\n\nexport default postcss\n"]},"metadata":{},"sourceType":"script"}