{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _supportsColor = _interopRequireDefault(require(\"supports-color\"));\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _terminalHighlight = _interopRequireDefault(require(\"./terminal-highlight\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if (error.name === 'CssSyntaxError') {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' })\n */\n\n\nvar CssSyntaxError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(CssSyntaxError, _Error);\n  /**\n   * @param {string} message  Error message.\n   * @param {number} [line]   Source line of the error.\n   * @param {number} [column] Source column of the error.\n   * @param {string} [source] Source code of the broken file.\n   * @param {string} [file]   Absolute path to the broken file.\n   * @param {string} [plugin] PostCSS plugin name, if error came from plugin.\n   */\n\n\n  function CssSyntaxError(message, line, column, source, file, plugin) {\n    var _this;\n\n    _this = _Error.call(this, message) || this;\n    /**\n     * Always equal to `'CssSyntaxError'`. You should always check error type\n     * by `error.name === 'CssSyntaxError'`\n     * instead of `error instanceof CssSyntaxError`,\n     * because npm could have several PostCSS versions.\n     *\n     * @type {string}\n     *\n     * @example\n     * if (error.name === 'CssSyntaxError') {\n     *   error //=> CssSyntaxError\n     * }\n     */\n\n    _this.name = 'CssSyntaxError';\n    /**\n     * Error message.\n     *\n     * @type {string}\n     *\n     * @example\n     * error.message //=> 'Unclosed block'\n     */\n\n    _this.reason = message;\n\n    if (file) {\n      /**\n       * Absolute path to the broken file.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.file       //=> 'a.sass'\n       * error.input.file //=> 'a.css'\n       */\n      _this.file = file;\n    }\n\n    if (source) {\n      /**\n       * Source code of the broken file.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.source       //=> 'a { b {} }'\n       * error.input.column //=> 'a b { }'\n       */\n      _this.source = source;\n    }\n\n    if (plugin) {\n      /**\n       * Plugin name, if error came from plugin.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.plugin //=> 'postcss-vars'\n       */\n      _this.plugin = plugin;\n    }\n\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      /**\n       * Source line of the error.\n       *\n       * @type {number}\n       *\n       * @example\n       * error.line       //=> 2\n       * error.input.line //=> 4\n       */\n      _this.line = line;\n      /**\n       * Source column of the error.\n       *\n       * @type {number}\n       *\n       * @example\n       * error.column       //=> 1\n       * error.input.column //=> 4\n       */\n\n      _this.column = column;\n    }\n\n    _this.setMessage();\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this), CssSyntaxError);\n    }\n\n    return _this;\n  }\n\n  var _proto = CssSyntaxError.prototype;\n\n  _proto.setMessage = function setMessage() {\n    /**\n     * Full error text in the GNU error format\n     * with plugin, file, line and column.\n     *\n     * @type {string}\n     *\n     * @example\n     * error.message //=> 'a.css:1:1: Unclosed block'\n     */\n    this.message = this.plugin ? this.plugin + ': ' : '';\n    this.message += this.file ? this.file : '<css input>';\n\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column;\n    }\n\n    this.message += ': ' + this.reason;\n  }\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * @param {boolean} [color] Whether arrow will be colored red by terminal\n   *                          color codes. By default, PostCSS will detect\n   *                          color support by `process.stdout.isTTY`\n   *                          and `process.env.NODE_DISABLE_COLORS`.\n   *\n   * @example\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   *\n   * @return {string} Few lines of CSS source that caused the error.\n   */\n  ;\n\n  _proto.showSourceCode = function showSourceCode(color) {\n    var _this2 = this;\n\n    if (!this.source) return '';\n    var css = this.source;\n\n    if (_terminalHighlight.default) {\n      if (typeof color === 'undefined') color = _supportsColor.default.stdout;\n      if (color) css = (0, _terminalHighlight.default)(css);\n    }\n\n    var lines = css.split(/\\r?\\n/);\n    var start = Math.max(this.line - 3, 0);\n    var end = Math.min(this.line + 2, lines.length);\n    var maxWidth = String(end).length;\n\n    function mark(text) {\n      if (color && _chalk.default.red) {\n        return _chalk.default.red.bold(text);\n      }\n\n      return text;\n    }\n\n    function aside(text) {\n      if (color && _chalk.default.gray) {\n        return _chalk.default.gray(text);\n      }\n\n      return text;\n    }\n\n    return lines.slice(start, end).map(function (line, index) {\n      var number = start + 1 + index;\n      var gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n\n      if (number === _this2.line) {\n        var spacing = aside(gutter.replace(/\\d/g, ' ')) + line.slice(0, _this2.column - 1).replace(/[^\\t]/g, ' ');\n        return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^');\n      }\n\n      return ' ' + aside(gutter) + line;\n    }).join('\\n');\n  }\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * @example\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   *\n   * @return {string} Error position, message and source code.\n   */\n  ;\n\n  _proto.toString = function toString() {\n    var code = this.showSourceCode();\n\n    if (code) {\n      code = '\\n\\n' + code + '\\n';\n    }\n\n    return this.name + ': ' + this.message + code;\n  }\n  /**\n   * @memberof CssSyntaxError#\n   * @member {Input} input Input object with PostCSS internal information\n   *                       about input file. If input has source map\n   *                       from previous tool, PostCSS will use origin\n   *                       (for example, Sass) source. You can use this\n   *                       object to get PostCSS input source.\n   *\n   * @example\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   */\n  ;\n\n  return CssSyntaxError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar _default = CssSyntaxError;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["css-syntax-error.es6"],"names":["CssSyntaxError","Error","setMessage","showSourceCode","css","terminalHighlight","color","supportsColor","lines","start","Math","end","maxWidth","String","chalk","number","gutter","spacing","aside","line","mark","toString","code"],"mappings":"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","sourcesContent":["import supportsColor from 'supports-color'\nimport chalk from 'chalk'\n\nimport terminalHighlight from './terminal-highlight'\n\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if (error.name === 'CssSyntaxError') {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' })\n */\nclass CssSyntaxError extends Error {\n  /**\n   * @param {string} message  Error message.\n   * @param {number} [line]   Source line of the error.\n   * @param {number} [column] Source column of the error.\n   * @param {string} [source] Source code of the broken file.\n   * @param {string} [file]   Absolute path to the broken file.\n   * @param {string} [plugin] PostCSS plugin name, if error came from plugin.\n   */\n  constructor (message, line, column, source, file, plugin) {\n    super(message)\n\n    /**\n     * Always equal to `'CssSyntaxError'`. You should always check error type\n     * by `error.name === 'CssSyntaxError'`\n     * instead of `error instanceof CssSyntaxError`,\n     * because npm could have several PostCSS versions.\n     *\n     * @type {string}\n     *\n     * @example\n     * if (error.name === 'CssSyntaxError') {\n     *   error //=> CssSyntaxError\n     * }\n     */\n    this.name = 'CssSyntaxError'\n    /**\n     * Error message.\n     *\n     * @type {string}\n     *\n     * @example\n     * error.message //=> 'Unclosed block'\n     */\n    this.reason = message\n\n    if (file) {\n      /**\n       * Absolute path to the broken file.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.file       //=> 'a.sass'\n       * error.input.file //=> 'a.css'\n       */\n      this.file = file\n    }\n    if (source) {\n      /**\n       * Source code of the broken file.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.source       //=> 'a { b {} }'\n       * error.input.column //=> 'a b { }'\n       */\n      this.source = source\n    }\n    if (plugin) {\n      /**\n       * Plugin name, if error came from plugin.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.plugin //=> 'postcss-vars'\n       */\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      /**\n       * Source line of the error.\n       *\n       * @type {number}\n       *\n       * @example\n       * error.line       //=> 2\n       * error.input.line //=> 4\n       */\n      this.line = line\n      /**\n       * Source column of the error.\n       *\n       * @type {number}\n       *\n       * @example\n       * error.column       //=> 1\n       * error.input.column //=> 4\n       */\n      this.column = column\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage () {\n    /**\n     * Full error text in the GNU error format\n     * with plugin, file, line and column.\n     *\n     * @type {string}\n     *\n     * @example\n     * error.message //=> 'a.css:1:1: Unclosed block'\n     */\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * @param {boolean} [color] Whether arrow will be colored red by terminal\n   *                          color codes. By default, PostCSS will detect\n   *                          color support by `process.stdout.isTTY`\n   *                          and `process.env.NODE_DISABLE_COLORS`.\n   *\n   * @example\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   *\n   * @return {string} Few lines of CSS source that caused the error.\n   */\n  showSourceCode (color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (terminalHighlight) {\n      if (typeof color === 'undefined') color = supportsColor.stdout\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    function mark (text) {\n      if (color && chalk.red) {\n        return chalk.red.bold(text)\n      }\n      return text\n    }\n    function aside (text) {\n      if (color && chalk.gray) {\n        return chalk.gray(text)\n      }\n      return text\n    }\n\n    return lines.slice(start, end).map((line, index) => {\n      let number = start + 1 + index\n      let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n      if (number === this.line) {\n        let spacing = aside(gutter.replace(/\\d/g, ' ')) +\n          line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n        return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n      }\n      return ' ' + aside(gutter) + line\n    }).join('\\n')\n  }\n\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * @example\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   *\n   * @return {string} Error position, message and source code.\n   */\n  toString () {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n\n  /**\n   * @memberof CssSyntaxError#\n   * @member {Input} input Input object with PostCSS internal information\n   *                       about input file. If input has source map\n   *                       from previous tool, PostCSS will use origin\n   *                       (for example, Sass) source. You can use this\n   *                       object to get PostCSS input source.\n   *\n   * @example\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   */\n}\n\nexport default CssSyntaxError\n"]},"metadata":{},"sourceType":"script"}