{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n};\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nvar Stringifier = /*#__PURE__*/function () {\n  function Stringifier(builder) {\n    this.builder = builder;\n  }\n\n  var _proto = Stringifier.prototype;\n\n  _proto.stringify = function stringify(node, semicolon) {\n    this[node.type](node, semicolon);\n  };\n\n  _proto.root = function root(node) {\n    this.body(node);\n    if (node.raws.after) this.builder(node.raws.after);\n  };\n\n  _proto.comment = function comment(node) {\n    var left = this.raw(node, 'left', 'commentLeft');\n    var right = this.raw(node, 'right', 'commentRight');\n    this.builder('/*' + left + node.text + right + '*/', node);\n  };\n\n  _proto.decl = function decl(node, semicolon) {\n    var between = this.raw(node, 'between', 'colon');\n    var string = node.prop + between + this.rawValue(node, 'value');\n\n    if (node.important) {\n      string += node.raws.important || ' !important';\n    }\n\n    if (semicolon) string += ';';\n    this.builder(string, node);\n  };\n\n  _proto.rule = function rule(node) {\n    this.block(node, this.rawValue(node, 'selector'));\n\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end');\n    }\n  };\n\n  _proto.atrule = function atrule(node, semicolon) {\n    var name = '@' + node.name;\n    var params = node.params ? this.rawValue(node, 'params') : '';\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName;\n    } else if (params) {\n      name += ' ';\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params);\n    } else {\n      var end = (node.raws.between || '') + (semicolon ? ';' : '');\n      this.builder(name + params + end, node);\n    }\n  };\n\n  _proto.body = function body(node) {\n    var last = node.nodes.length - 1;\n\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break;\n      last -= 1;\n    }\n\n    var semicolon = this.raw(node, 'semicolon');\n\n    for (var i = 0; i < node.nodes.length; i++) {\n      var child = node.nodes[i];\n      var before = this.raw(child, 'before');\n      if (before) this.builder(before);\n      this.stringify(child, last !== i || semicolon);\n    }\n  };\n\n  _proto.block = function block(node, start) {\n    var between = this.raw(node, 'between', 'beforeOpen');\n    this.builder(start + between + '{', node, 'start');\n    var after;\n\n    if (node.nodes && node.nodes.length) {\n      this.body(node);\n      after = this.raw(node, 'after');\n    } else {\n      after = this.raw(node, 'after', 'emptyBody');\n    }\n\n    if (after) this.builder(after);\n    this.builder('}', node, 'end');\n  };\n\n  _proto.raw = function raw(node, own, detect) {\n    var value;\n    if (!detect) detect = own; // Already had\n\n    if (own) {\n      value = node.raws[own];\n      if (typeof value !== 'undefined') return value;\n    }\n\n    var parent = node.parent; // Hack for first rule in CSS\n\n    if (detect === 'before') {\n      if (!parent || parent.type === 'root' && parent.first === node) {\n        return '';\n      }\n    } // Floating child without parent\n\n\n    if (!parent) return DEFAULT_RAW[detect]; // Detect style by other nodes\n\n    var root = node.root();\n    if (!root.rawCache) root.rawCache = {};\n\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect];\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect);\n    } else {\n      var method = 'raw' + capitalize(detect);\n\n      if (this[method]) {\n        value = this[method](root, node);\n      } else {\n        root.walk(function (i) {\n          value = i.raws[own];\n          if (typeof value !== 'undefined') return false;\n        });\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect];\n    root.rawCache[detect] = value;\n    return value;\n  };\n\n  _proto.rawSemicolon = function rawSemicolon(root) {\n    var value;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n\n  _proto.rawEmptyBody = function rawEmptyBody(root) {\n    var value;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n\n  _proto.rawIndent = function rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent;\n    var value;\n    root.walk(function (i) {\n      var p = i.parent;\n\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          var parts = i.raws.before.split('\\n');\n          value = parts[parts.length - 1];\n          value = value.replace(/[^\\s]/g, '');\n          return false;\n        }\n      }\n    });\n    return value;\n  };\n\n  _proto.rawBeforeComment = function rawBeforeComment(root, node) {\n    var value;\n    root.walkComments(function (i) {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n\n        return false;\n      }\n    });\n\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '');\n    }\n\n    return value;\n  };\n\n  _proto.rawBeforeDecl = function rawBeforeDecl(root, node) {\n    var value;\n    root.walkDecls(function (i) {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n\n        return false;\n      }\n    });\n\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule');\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '');\n    }\n\n    return value;\n  };\n\n  _proto.rawBeforeRule = function rawBeforeRule(root) {\n    var value;\n    root.walk(function (i) {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before;\n\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      }\n    });\n    if (value) value = value.replace(/[^\\s]/g, '');\n    return value;\n  };\n\n  _proto.rawBeforeClose = function rawBeforeClose(root) {\n    var value;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after;\n\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      }\n    });\n    if (value) value = value.replace(/[^\\s]/g, '');\n    return value;\n  };\n\n  _proto.rawBeforeOpen = function rawBeforeOpen(root) {\n    var value;\n    root.walk(function (i) {\n      if (i.type !== 'decl') {\n        value = i.raws.between;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n\n  _proto.rawColon = function rawColon(root) {\n    var value;\n    root.walkDecls(function (i) {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '');\n        return false;\n      }\n    });\n    return value;\n  };\n\n  _proto.beforeAfter = function beforeAfter(node, detect) {\n    var value;\n\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment');\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule');\n    } else {\n      value = this.raw(node, null, 'beforeClose');\n    }\n\n    var buf = node.parent;\n    var depth = 0;\n\n    while (buf && buf.type !== 'root') {\n      depth += 1;\n      buf = buf.parent;\n    }\n\n    if (value.indexOf('\\n') !== -1) {\n      var indent = this.raw(node, null, 'indent');\n\n      if (indent.length) {\n        for (var step = 0; step < depth; step++) {\n          value += indent;\n        }\n      }\n    }\n\n    return value;\n  };\n\n  _proto.rawValue = function rawValue(node, prop) {\n    var value = node[prop];\n    var raw = node.raws[prop];\n\n    if (raw && raw.value === value) {\n      return raw.raw;\n    }\n\n    return value;\n  };\n\n  return Stringifier;\n}();\n\nvar _default = Stringifier;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["stringifier.es6"],"names":["DEFAULT_RAW","colon","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","after","emptyBody","commentLeft","commentRight","semicolon","str","Stringifier","stringify","node","root","comment","left","right","decl","between","string","rule","atrule","name","params","end","body","last","i","child","before","block","start","raw","detect","value","parent","method","capitalize","rawSemicolon","rawEmptyBody","rawIndent","p","parts","rawBeforeComment","rawBeforeDecl","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","beforeAfter","buf","depth","step","rawValue"],"mappings":"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","sourcesContent":["const DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor (builder) {\n    this.builder = builder\n  }\n\n  stringify (node, semicolon) {\n    this[node.type](node, semicolon)\n  }\n\n  root (node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment (node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl (node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule (node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule (node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body (node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block (node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw (node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    // Hack for first rule in CSS\n    if (detect === 'before') {\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = { }\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent (root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/[^\\s]/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment (root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl (root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/[^\\s]/g, '')\n    return value\n  }\n\n  rawBeforeClose (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/[^\\s]/g, '')\n    return value\n  }\n\n  rawBeforeOpen (root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon (root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter (node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.indexOf('\\n') !== -1) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue (node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nexport default Stringifier\n"]},"metadata":{},"sourceType":"script"}