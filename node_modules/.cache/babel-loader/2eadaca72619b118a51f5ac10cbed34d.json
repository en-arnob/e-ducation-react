{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _container = _interopRequireDefault(require(\"./container\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\n\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Root, _Container);\n\n  function Root(defaults) {\n    var _this;\n\n    _this = _Container.call(this, defaults) || this;\n    _this.type = 'root';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n\n  var _proto = Root.prototype;\n\n  _proto.removeChild = function removeChild(child, ignore) {\n    var index = this.index(child);\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before;\n    }\n\n    return _Container.prototype.removeChild.call(this, child);\n  };\n\n  _proto.normalize = function normalize(child, sample, type) {\n    var nodes = _Container.prototype.normalize.call(this, child);\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before;\n        } else {\n          delete sample.raws.before;\n        }\n      } else if (this.first !== sample) {\n        for (var _iterator = _createForOfIteratorHelperLoose(nodes), _step; !(_step = _iterator()).done;) {\n          var node = _step.value;\n          node.raws.before = sample.raws.before;\n        }\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] Options with only `to` and `map` keys.\n   *\n   * @return {Result} Result with current root’s CSS.\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   */\n  ;\n\n  _proto.toResult = function toResult(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var LazyResult = require('./lazy-result');\n\n    var Processor = require('./processor');\n\n    var lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  }\n  /**\n   * @memberof Root#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n  ;\n\n  return Root;\n}(_container.default);\n\nvar _default = Root;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["root.es6"],"names":["Root","Container","removeChild","index","normalize","nodes","type","sample","node","toResult","opts","LazyResult","require","Processor","lazy"],"mappings":";;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;IAUMA,I;;;AACJ,WAAA,IAAA,CAAA,QAAA,EAAuB;AAAA,QAAA,KAAA;;AACrB,IAAA,KAAA,GAAA,UAAA,CAAA,IAAA,CAAA,IAAA,EAAA,QAAA,KAAA,IAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAA,MAAA;AACA,QAAI,CAAC,KAAA,CAAL,KAAA,EAAiB,KAAA,CAAA,KAAA,GAAA,EAAA;AAHI,WAAA,KAAA;AAItB;;;;SAEDE,W,GAAAA,SAAAA,WAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAA4B;AAC1B,QAAIC,KAAK,GAAG,KAAA,KAAA,CAAZ,KAAY,CAAZ;;AAEA,QAAI,CAAA,MAAA,IAAWA,KAAK,KAAhB,CAAA,IAA0B,KAAA,KAAA,CAAA,MAAA,GAA9B,CAAA,EAAqD;AACnD,WAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,GAA4B,KAAA,KAAA,CAAA,KAAA,EAAA,IAAA,CAA5B,MAAA;AACD;;AAED,WAAA,UAAA,CAAA,SAAA,CAAA,WAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;;SAGFC,S,GAAAA,SAAAA,SAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAgC;AAC9B,QAAIC,KAAK,GAAA,UAAA,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,EAAT,KAAS,CAAT;;AAEA,QAAA,MAAA,EAAY;AACV,UAAIC,IAAI,KAAR,SAAA,EAAwB;AACtB,YAAI,KAAA,KAAA,CAAA,MAAA,GAAJ,CAAA,EAA2B;AACzBC,UAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,GAAqB,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAArBA,MAAAA;AADF,SAAA,MAEO;AACL,iBAAOA,MAAM,CAANA,IAAAA,CAAP,MAAA;AACD;AALH,OAAA,MAMO,IAAI,KAAA,KAAA,KAAJ,MAAA,EAA2B;AAChC,aAAA,IAAA,SAAA,GAAA,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAAwB;AAAA,cAAfC,IAAe,GAAA,KAAA,CAAA,KAAA;AACtBA,UAAAA,IAAI,CAAJA,IAAAA,CAAAA,MAAAA,GAAmBD,MAAM,CAANA,IAAAA,CAAnBC,MAAAA;AACD;AACF;AACF;;AAED,WAAA,KAAA;AACD;AAED;;;;;;;;;;;;;;;SAaAC,Q,GAAAA,SAAAA,QAAAA,CAAAA,IAAAA,EAAsB;AAAA,QAAZC,IAAY,KAAA,KAAA,CAAA,EAAA;AAAZA,MAAAA,IAAY,GAAL,EAAPA;AAAY;;AACpB,QAAIC,UAAU,GAAGC,OAAO,CAAxB,eAAwB,CAAxB;;AACA,QAAIC,SAAS,GAAGD,OAAO,CAAvB,aAAuB,CAAvB;;AAEA,QAAIE,IAAI,GAAG,IAAA,UAAA,CAAe,IAAf,SAAe,EAAf,EAAA,IAAA,EAAX,IAAW,CAAX;AACA,WAAOA,IAAI,CAAX,SAAOA,EAAP;AACD;AAED;;;;;;;;;;;;;;;;;;EA1DiBb,UAAAA,CAAAA,O;;eA2EJD,I","sourcesContent":["import Container from './container'\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nclass Root extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild (child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize (child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] Options with only `to` and `map` keys.\n   *\n   * @return {Result} Result with current root’s CSS.\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   */\n  toResult (opts = { }) {\n    let LazyResult = require('./lazy-result')\n    let Processor = require('./processor')\n\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n\n  /**\n   * @memberof Root#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n}\n\nexport default Root\n"]},"metadata":{},"sourceType":"script"}