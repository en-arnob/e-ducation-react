{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _cssSyntaxError = _interopRequireDefault(require(\"./css-syntax-error\"));\n\nvar _previousMap = _interopRequireDefault(require(\"./previous-map\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar sequence = 0;\n/**\n * Represents the source CSS.\n *\n * @example\n * const root  = postcss.parse(css, { from: file })\n * const input = root.source.input\n */\n\nvar Input = /*#__PURE__*/function () {\n  /**\n   * @param {string} css    Input CSS source.\n   * @param {object} [opts] {@link Processor#process} options.\n   */\n  function Input(css, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (css === null || typeof css === 'undefined' || typeof css === 'object' && !css.toString) {\n      throw new Error(\"PostCSS received \" + css + \" instead of CSS string\");\n    }\n    /**\n     * Input CSS source\n     *\n     * @type {string}\n     *\n     * @example\n     * const input = postcss.parse('a{}', { from: file }).input\n     * input.css //=> \"a{}\"\n     */\n\n\n    this.css = css.toString();\n\n    if (this.css[0] === \"\\uFEFF\" || this.css[0] === \"\\uFFFE\") {\n      this.hasBOM = true;\n      this.css = this.css.slice(1);\n    } else {\n      this.hasBOM = false;\n    }\n\n    if (opts.from) {\n      if (/^\\w+:\\/\\//.test(opts.from) || _path.default.isAbsolute(opts.from)) {\n        /**\n         * The absolute path to the CSS source file defined\n         * with the `from` option.\n         *\n         * @type {string}\n         *\n         * @example\n         * const root = postcss.parse(css, { from: 'a.css' })\n         * root.source.input.file //=> '/home/ai/a.css'\n         */\n        this.file = opts.from;\n      } else {\n        this.file = _path.default.resolve(opts.from);\n      }\n    }\n\n    var map = new _previousMap.default(this.css, opts);\n\n    if (map.text) {\n      /**\n       * The input source map passed from a compilation step before PostCSS\n       * (for example, from Sass compiler).\n       *\n       * @type {PreviousMap}\n       *\n       * @example\n       * root.source.input.map.consumer().sources //=> ['a.sass']\n       */\n      this.map = map;\n      var file = map.consumer().file;\n      if (!this.file && file) this.file = this.mapResolve(file);\n    }\n\n    if (!this.file) {\n      sequence += 1;\n      /**\n       * The unique ID of the CSS source. It will be created if `from` option\n       * is not provided (because PostCSS does not know the file path).\n       *\n       * @type {string}\n       *\n       * @example\n       * const root = postcss.parse(css)\n       * root.source.input.file //=> undefined\n       * root.source.input.id   //=> \"<input css 1>\"\n       */\n\n      this.id = '<input css ' + sequence + '>';\n    }\n\n    if (this.map) this.map.file = this.from;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.error = function error(message, line, column, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var result;\n    var origin = this.origin(line, column);\n\n    if (origin) {\n      result = new _cssSyntaxError.default(message, origin.line, origin.column, origin.source, origin.file, opts.plugin);\n    } else {\n      result = new _cssSyntaxError.default(message, line, column, this.css, this.file, opts.plugin);\n    }\n\n    result.input = {\n      line: line,\n      column: column,\n      source: this.css\n    };\n    if (this.file) result.input.file = this.file;\n    return result;\n  }\n  /**\n   * Reads the input source map and returns a symbol position\n   * in the input source (e.g., in a Sass file that was compiled\n   * to CSS before being passed to PostCSS).\n   *\n   * @param {number} line   Line in input CSS.\n   * @param {number} column Column in input CSS.\n   *\n   * @return {filePosition} Position in input source.\n   *\n   * @example\n   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n   */\n  ;\n\n  _proto.origin = function origin(line, column) {\n    if (!this.map) return false;\n    var consumer = this.map.consumer();\n    var from = consumer.originalPositionFor({\n      line: line,\n      column: column\n    });\n    if (!from.source) return false;\n    var result = {\n      file: this.mapResolve(from.source),\n      line: from.line,\n      column: from.column\n    };\n    var source = consumer.sourceContentFor(from.source);\n    if (source) result.source = source;\n    return result;\n  };\n\n  _proto.mapResolve = function mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file;\n    }\n\n    return _path.default.resolve(this.map.consumer().sourceRoot || '.', file);\n  }\n  /**\n   * The CSS source identifier. Contains {@link Input#file} if the user\n   * set the `from` option, or {@link Input#id} if they did not.\n   *\n   * @type {string}\n   *\n   * @example\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.from //=> \"/home/ai/a.css\"\n   *\n   * const root = postcss.parse(css)\n   * root.source.input.from //=> \"<input css 1>\"\n   */\n  ;\n\n  _createClass(Input, [{\n    key: \"from\",\n    get: function get() {\n      return this.file || this.id;\n    }\n  }]);\n\n  return Input;\n}();\n\nvar _default = Input;\n/**\n * @typedef  {object} filePosition\n * @property {string} file   Path to file.\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["input.es6"],"names":["sequence","Input","opts","css","path","map","PreviousMap","file","error","origin","result","CssSyntaxError","line","column","source","consumer","from","mapResolve"],"mappings":"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","sourcesContent":["import path from 'path'\n\nimport CssSyntaxError from './css-syntax-error'\nimport PreviousMap from './previous-map'\n\nlet sequence = 0\n\n/**\n * Represents the source CSS.\n *\n * @example\n * const root  = postcss.parse(css, { from: file })\n * const input = root.source.input\n */\nclass Input {\n  /**\n   * @param {string} css    Input CSS source.\n   * @param {object} [opts] {@link Processor#process} options.\n   */\n  constructor (css, opts = { }) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${ css } instead of CSS string`)\n    }\n\n    /**\n     * Input CSS source\n     *\n     * @type {string}\n     *\n     * @example\n     * const input = postcss.parse('a{}', { from: file }).input\n     * input.css //=> \"a{}\"\n     */\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (/^\\w+:\\/\\//.test(opts.from) || path.isAbsolute(opts.from)) {\n        /**\n         * The absolute path to the CSS source file defined\n         * with the `from` option.\n         *\n         * @type {string}\n         *\n         * @example\n         * const root = postcss.parse(css, { from: 'a.css' })\n         * root.source.input.file //=> '/home/ai/a.css'\n         */\n        this.file = opts.from\n      } else {\n        this.file = path.resolve(opts.from)\n      }\n    }\n\n    let map = new PreviousMap(this.css, opts)\n    if (map.text) {\n      /**\n       * The input source map passed from a compilation step before PostCSS\n       * (for example, from Sass compiler).\n       *\n       * @type {PreviousMap}\n       *\n       * @example\n       * root.source.input.map.consumer().sources //=> ['a.sass']\n       */\n      this.map = map\n      let file = map.consumer().file\n      if (!this.file && file) this.file = this.mapResolve(file)\n    }\n\n    if (!this.file) {\n      sequence += 1\n      /**\n       * The unique ID of the CSS source. It will be created if `from` option\n       * is not provided (because PostCSS does not know the file path).\n       *\n       * @type {string}\n       *\n       * @example\n       * const root = postcss.parse(css)\n       * root.source.input.file //=> undefined\n       * root.source.input.id   //=> \"<input css 1>\"\n       */\n      this.id = '<input css ' + sequence + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  error (message, line, column, opts = { }) {\n    let result\n    let origin = this.origin(line, column)\n    if (origin) {\n      result = new CssSyntaxError(\n        message, origin.line, origin.column,\n        origin.source, origin.file, opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message, line, column, this.css, this.file, opts.plugin)\n    }\n\n    result.input = { line, column, source: this.css }\n    if (this.file) result.input.file = this.file\n\n    return result\n  }\n\n  /**\n   * Reads the input source map and returns a symbol position\n   * in the input source (e.g., in a Sass file that was compiled\n   * to CSS before being passed to PostCSS).\n   *\n   * @param {number} line   Line in input CSS.\n   * @param {number} column Column in input CSS.\n   *\n   * @return {filePosition} Position in input source.\n   *\n   * @example\n   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n   */\n  origin (line, column) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let result = {\n      file: this.mapResolve(from.source),\n      line: from.line,\n      column: from.column\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve (file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return path.resolve(this.map.consumer().sourceRoot || '.', file)\n  }\n\n  /**\n   * The CSS source identifier. Contains {@link Input#file} if the user\n   * set the `from` option, or {@link Input#id} if they did not.\n   *\n   * @type {string}\n   *\n   * @example\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.from //=> \"/home/ai/a.css\"\n   *\n   * const root = postcss.parse(css)\n   * root.source.input.from //=> \"<input css 1>\"\n   */\n  get from () {\n    return this.file || this.id\n  }\n}\n\nexport default Input\n\n/**\n * @typedef  {object} filePosition\n * @property {string} file   Path to file.\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n"]},"metadata":{},"sourceType":"script"}